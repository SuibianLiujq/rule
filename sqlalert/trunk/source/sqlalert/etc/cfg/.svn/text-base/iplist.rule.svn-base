# This file defines the rule to find the IP owner and desc.
#
# Author: ZHANG Li Dan <lidan.zhang@clearclouds-global.com>
include "cfg/emails.rule";
include "cfg/data/iplist.rule";


# Check if item eques(in) list.
#
# @item: Item to check.
# @list: Another item or list of items.
def iplist_in(item, list) {
	return is_list(list) ? (item in list) : (item == list);
}


# iplist_get() - Returns the combined owner(desc) of given name.
#
# @name: Name of IP address.
def iplist_get(name) {
	return iplist_get_owner(name) + "(" + iplist_get_desc(name) + ")";
}


# iplist_get_owner() - Returns the owner of given name.
#
# @name: Name of IP address.
def iplist_get_owner(name) {
	for item in __iplist_owners__ {
		if ("ip" in item) && iplist_in(name, item["ip"]) {
			return item["owner"];
		}
	}
	return __iplist_def_owner__;
}


# iplist_get_desc() - Returns the desc of given name.
#
# @name: Name of IP address.
def iplist_get_desc(name) {
	for item in __iplist_list__ {
		if ("ip" in item) && iplist_in(name, item["ip"]) {
			return item["desc"];
		}
	}
	return __iplist_def_owner__;
}


# iplist_get_emails() - Returns the emails list of owners.
#
# @list: List of IP address or a list of DICTs.
# @key:  The key of the IP address.
def iplist_get_emails(list, key) {
	owners = [ ];

	if is_list(list) {
		for item in list {
			if is_str(item) {
				owners = append(owners, iplist_get_owner(item));
			} else if is_dict(item) && (key in item) {
				owners = append(owners, iplist_get_owner(item[key]));
			}
		}
	}

	return emails_get_list(owners);
}


# iplist_map() - Add combined owner(desc) to the list of items.
#
# @list: A list of dict.
# @key:  Key of IP address name.
# @name: New key to add to the item in the list.
def iplist_map(list, key, name) {
	if !is_str(name) { name = "owner"; }

	for item in list {
		if is_dict(item) && key in item {
			item[name] = iplist_get(item[key]);
		}
	}
}


# iplist_map_owner() - Add owner to the list of items.
#
# @list: A list of dict.
# @key:  Key of IP address name.
# @name: New key to add to the item in the list.
def iplist_map_owner(list, key, name) {
	if !is_str(name) { name = "owner"; }

	for item in list {
		if is_dict(item) && key in item {
			item[name] = iplist_get_owner(item[key]);
		}
	}
}


# iplist_map_desc() - Add desc to the list of items.
#
# @list: A list of dict.
# @key:  Key of IP address name.
# @name: New key to add to the item in the list.
def iplist_map_desc(list, key, name) {
	if !is_str(name) { name = "desc"; }

	for item in list {
		if is_dict(item) && key in item {
			item[name] = iplist_get_desc(item[key]);
		}
	}
}

